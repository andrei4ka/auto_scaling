#!/bin/bash


unset node_net_params
declare -A node_net_params

unset bond_mode_params
declare -A bond_mode_params

unset bond_data
declare -A bond_data

bond_template='{"type":"bond","name":"ovs-bondbid","mode":"active-backup","assigned_networks":[],"slaves":[]}'
bond_id=0
slave_template='{"name": "ethname"}'

OPTS=`getopt -o atuinmpsfxyzkl: --long admin-pass:,admin-tenant:,admin-username:,fuel:,node:,mgmt:,private:,public:,storage:,assign:,mgmtbondmode:,publicbondmode:,privatebondmode:,storagebondmode: -n 'parse-options' -- "$@"`
if [ $? != 0 ] ; then echo "Failed parsing options." >&2 ; exit 1 ; fi

eval set -- "$OPTS"

while true; do
  case "$1" in
    -a | --admin-pass ) admin_pass="$2"; shift; shift;;
    -t | --admin-tenant ) admin_tenant="$2"; shift; shift;;
    -u | --admin-username ) admin_username="$2"; shift; shift;;
    -i | --fuel ) fuel_ip="$2"; shift; shift;;
    -n | --node ) node_id="$2"; shift; shift;;
    -m | --mgmt ) node_net_params['management']="$2"; shift; shift;;
    -p | --public ) node_net_params['public']="$2"; shift; shift;;
    -k | --private ) node_net_params['private']="$2"; shift; shift;;
    -s | --storage ) node_net_params['storage']="$2"; shift; shift;;
    -f | --assign ) assign_type="$2"; shift; shift;;
    -x | --mgmtbondmode ) bond_mode_params['management']="$2"; shift; shift;;
    -y | --publicbondmode ) bond_mode_params['public']="$2"; shift; shift;;
    -l | --privatebondmode ) bond_mode_params['private']="$2"; shift; shift;;
    -z | --storagebondmode ) bond_mode_params['storage']="$2"; shift; shift;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

token_id=$(curl -s 'http://'${fuel_ip}':5000/v2.0/tokens' -X POST -H "Content-Type: application/json" -H "Accept: application/json"  -d '{"auth": {"tenantName": "'$admin_tenant'", "passwordCredentials": {"username": "'$admin_username'", "password": "'$admin_pass'"}}}' | python -c 'import sys, yaml; print yaml.load(sys.stdin)["access"]["token"]["id"]')
[ -z $token_id ] && echo "Error!Can't get token_id from fuel!" && exit 1

fuel_api_path="http://${fuel_ip}:8000/api"
curl_data=`curl -s -H "X-Auth-Token: $token_id" -X GET ${fuel_api_path}/nodes/${node_id}/interfaces | jq 'sort_by(.name)' -c`

function manage_mapping {
  [[ $1 == *+* ]] && set_role_by_param_bond $1 $2 || set_role_by_param $1 $2
}

function set_role_by_param {
  local existed_nets=`echo $curl_data | jq ".[] | select(.${assign_type}==\"${1}\").assigned_networks" -c | rev | cut -c 2- | rev | cut -c 2-`
  local data=`[[ ! -z $existed_nets ]] && echo $existed_nets,$2 || echo $2`
  curl_data=`echo $curl_data | jq "map( if .${assign_type} == \"${1}\" then (.assigned_networks=[$data]) else (.) end)"`
}

function migrate_admin_net {
  local bond_hash=$1
  if echo ${!bond_data[@]} | grep -q $bond_hash; then
    local bond_name=''
    for name in ${!bond_data[@]};do echo $name | grep -q $bond_hash && bond_hash=${name}; done
    set_role_by_param_bond $bond_hash $2
 else
    set_role_by_param $bond_hash $2
  fi
}

function set_role_by_param_bond {
   echo ${!bond_data[@]} | grep -q $1 || add_bond $1
   local bond_name=${bond_data["$1"]}
   local existed_nets=`echo $curl_data | jq ".[] | select(.name==\"${bond_name}\").assigned_networks" -c | rev | cut -c 2- | rev | cut -c 2-`
   local data=`[[ ! -z $existed_nets ]] && echo $existed_nets,$2 || echo $2`
   curl_data=`echo $curl_data | jq "map( if .name == \"${bond_name}\" then (.assigned_networks=[$data]) else (.) end)"`
}

function add_bond {
  local new_bond=`echo $bond_template | sed -e "s/bid/$bond_id/"`
  local temp=`echo $curl_data | rev | cut -c 2- | rev`
  curl_data="$temp,$new_bond]"
  local bond_name="ovs-bond${bond_id}"
  add_slaves_to_bond $1 $bond_name
  bond_data["$1"]=$bond_name
  bond_id=`expr $bond_id + 1`
}

function add_slaves_to_bond {
  local slave_list=$1
  local bond_name=$2
  IFS=$'+' && for slave in $slave_list; do add_slave_to_bond $slave $bond_name; done && unset IFS
}

function add_slave_to_bond {
  local slave=$1
  [[ $assign_type == 'mac' ]] && slave=`echo $curl_data | jq 'map(select(.mac == "'"$slave"'")) | .[].name' -r`
  local new_slave=`echo $slave_template | sed -e "s/ethname/$slave/"`
  local existed_slaves=`echo $curl_data | jq ".[] | select(.name==\"${2}\").slaves" -c | rev | cut -c 2- | rev | cut -c 2-`
  local data=`[[ ! -z $existed_slaves ]] && echo $existed_slaves,$new_slave || echo $new_slave`
  curl_data=`echo $curl_data | jq "map( if .name == \"${2}\" then (.slaves=[$data]) else (.) end)"`
}

#load current net data
unset net_data
declare -A net_data
for netname in ${!node_net_params[@]}; do
    net_data[$netname]=`echo $curl_data | jq '.[] | select(.assigned_networks[].name=="'"$netname"'").assigned_networks' | jq '.[] | select(.name=="'"$netname"'")' -c`
done

#get admin interface data
admin_net_data=`echo $curl_data | jq '.[] | select(.assigned_networks[].name=="fuelweb_admin").assigned_networks' | jq '.[] | select(.name=="fuelweb_admin")' -c`
admin_if_type=`echo $curl_data | jq ".[] | select(.assigned_networks[].name=="'"fuelweb_admin"'").type" -r`

[[  $admin_if_type == 'bond'  ]] && admin_if_name=`echo $curl_data | jq '.[] | select(.assigned_networks[].name=="'"fuelweb_admin"'").slaves | sort_by(.name)[0].name' -r` && admin_net_param=`echo $curl_data | jq ".[] | select(.name==\"$admin_if_name\").${assign_type}" -r`  || admin_net_param=`echo $curl_data | jq ".[] | select(.assigned_networks[].name=="'"fuelweb_admin"'").${assign_type}" -r`

#clear bond
curl_data=`echo $curl_data | jq 'map(select(.type == "ether"))'`
#clear all interfaces data
curl_data=`echo $curl_data | jq 'map(.assigned_networks=[])'`

for netname in ${!node_net_params[@]}; do manage_mapping ${node_net_params[$netname]} ${net_data[$netname]}; done

#reassign admin interface$
migrate_admin_net $admin_net_param $admin_net_data

for netname in ${!bond_mode_params[@]}; do
  bondname=`echo $curl_data | jq '.[] | select(.assigned_networks[].name == "'"$netname"'").name' -r`
  curl_data=`echo $curl_data  | jq 'map( if .name == "'"$bondname"'" then (.mode="'"${bond_mode_params[${netname}]}"'") else (.) end)'`
done

curl -s -H "X-Auth-Token: $token_id" -X PUT ${fuel_api_path}/nodes/${node_id}/interfaces --data "`echo $curl_data`"
