#!/bin/bash

function show_usage {
    echo "Usage:"
    echo "  $0 command"
    echo
    echo "Available commands: (Note: work in progress)"
    echo "help: show this message"
    echo "Options:"
    ${GREEN}
    echo "  *--compute : Use compute environment"
    echo "  *--ceph    : Use ceph environment"
    echo "  * -- Required parameter"
    echo "  --debug    : to show some debug messages"
    ${RESET}
    echo "Commands  :"
    echo "  list: List spare nodes in compute/ceph environment"
    echo "  info: Info about corrsponding node in compute/ceph list"
    echo "  boot: to boot up node"
    echo
    echo "Examples:"
    echo "  $0 --compute list   : Lists all compute nodes from config/computes_to_add"
    echo "  $0 --ceph info 2    : Info about second node from the file config/cephs_to_add"
    echo "  $0 --compute boot 1 : Boot first compute from the file config/computes_to_add"

}

function parse_options {
    opts="$@"
    for opt in $@; do
      case $opt in
        -d|--debug)   DEBUG=true
                      shift
                      ;;
        --nodebug)    DEBUG=false
                      shift
                      ;;
        --compute)    role="compute"
                      shift
                      nonopts+=("$@")
                      return
                      ;;
        --ceph)       role="ceph-osd"
                      shift
                      nonopts+=("$@")
                      return
                      ;;
        --)           shift
                      nonopts+=("$@")
                      return
                      ;;
        help|boot|deploy|start|stop|remove)
                      nonopts+=("$@")
                      return
                      ;;
        -*)           ${YELLOW}
                      echo "Unrecognized option: $opt" 1>&2
                      ${RESET}
                      exit 1
                      ;;
        *)            nonopts+=("$opt")
                      ;;
      esac
    done
}

function wol_and_check {
    re='^[1-9]+$'
    if [[ "$1" == '' ]]; then
      ${GREEN}
      echo "usage: $0 node 1 2 4" >&2; 
      ${RESET}
      exit 0
    fi
    if ! [[ $1 =~ $re ]] ; then
      ${RED}
      echo "error: Not a number, should be in range [1..$nodes_count]" >&2;
      ${RESET}
      exit 1
    else
      check_rc_fuel_node            ## Check that command fuel node working well
      check_nodes_count
      (( macid = (( (( $1 - 1 )) * 8 )) ))
      (( hostname_id = (( (( $1 - 1 )) * 8 + 1 )) ))

      check_active_deployments      ## Check that we have no nodes with status Deploying|provisioning and so on
      wol_node ${data[ $macid ]}    ## Sending magick packet
      check_ready node ${data[ $macid ]} ## Checking, that node Online
      get_fuel_id ${data[ $macid ]} ## Getting the ID that fuel gave to the node
      set_ext_ip $1
      set_hostname $1 $node_fuel_id ## Setting hostname
      add_to_env $node_fuel_id
      net_config $1
      disk_config $node_fuel_id     ## Comment this line if Compute
      remove_from_list ${data[ $macid ]}
      deploy_changes
      check_ready deployed ${data[ $hostname_id ]}
      ceph_change_rack $1
     fi

}

function list_nodes {
    columnname=("ADMIN MAC" "NAME" "IP" "BOND0-slave1" "BOND0-slave2" "BOND1-slave1" "BOND1-slave2" "RACK-ID")
    offset=0
    for ((nodes=0;nodes<nodes_count;nodes++))
      do
        for((i=0;i<8;i++))
        do
          echo ${columnname[$i]} $'\x$' ${data[ (( $i + $offset )) ]}
        done | column -t -s$'\x$'
        (( offset += 8 ))
      done
}

function node_data {

    re='^[1-9]+$'
    if [[ "$1" == '' ]]; then
      ${GREEN}
      echo "usage: $0 info 1 2 4" >&2; 
      ${RESET}
      exit 0
    fi
    for nodes in $@; do
      if ! [[ $nodes =~ $re ]] ; then
        ${RED}
        echo "error: Not a number, should be in range [1..$nodes_count]" >&2;
        ${RESET}
        exit 1
      elif
        [[ $nodes > $nodes_count ]] ; then 
        ${RED}
        echo "ID of node number out of range [1.."$nodes_count"] please check the file node_to_add"
        ${RESET}
      else
        columnname=("MAC" "NAME" "IP" "BOND0-Slave1" "BOND0-Slave2" "BOND1-Slave1" "BOND0-Slave2" "RACK-ID")
        for((i=0;i<8;i++)) 
         do
          echo ${columnname[$i]} $'\x$' "${data[ (( (( $nodes - 1 )) * 8 + $i )) ]}"
         done | column -t -s$'\x$'
      fi
    done
  node_count
}


function check_active_deployments {
    n=`$FUEL nodes --env $env_id | egrep "deplo|disco|ready|provi" | egrep -v "ready|disco" | wc -l` ## Collecting the number of non-ready objects

    if [[ "$n" > "0" ]]; then
      ${RED}
      echo "Deployment still running, finish the deployment first"; 
      ${RESET}
      exit 1
    fi
}

function check_rc_fuel_node {
    rc=`fuel nodes &> /dev/null ; echo $?`

    if [[ "$rc" > "0" ]]; then
      ${RED}
      echo "Check the fuel node command is working"; 
      ${RESET}
      exit 1
    fi
}

function ceph_change_rack {

    if [ "$role" == "compute" ]; then
        debug skipping the rack change for compute
    else
        (( rackid = (( (( $1 - 1 )) * 8 + 7 )) ))
        (( hostname_id = (( (( $1 - 1 )) * 8 + 1 )) ))
        ceph osd crush move ${data[ $hostname_id ]} rack=${data[ $rackid ]}
    fi
}

function get_disks {
#    DEBUG=true

#    this is not used
#    Use config for configuration disks

    declare -a disks_array
    get_fuel_ip ${data[ $macid ]}
    disks_array=(`ssh $node_fuel_ip cat /proc/partitions 2>/dev/null | grep -P '[svh]d[a-z](?![0-9])' | awk '{print $3" "$4}'`)
    #debug ${disks_array[@]}
    (( disk_count = (( ${#disks_array[@]} / 2 )) ))
    debug "disk count:" $disk_count

    update_credentials

    for f in `seq 0 2 $(( ${#disks_array[@]} - 1 ))`; do
        diskn=$(( $f + 1 ))
        size=$(( ${disks_array[$f]} / 1024 - 565))
        echo "#name:" ${disks_array[$diskn]} $'\x$' "size:" $size
      if [ $f == "0" ]; then
         echo "${disks_array[$diskn]}=os:${size},ceph:0,cephjournal:0 "
      elif [ $f == "2" ]; then 
         echo "${disks_array[$diskn]}=os:0,ceph:0,cephjournal:${size} "
      else
         echo "${disks_array[$diskn]}=os:0,ceph:${size},cephjournal:0 "
      fi
    done | column -t -s$'\x$'

   #This function should generate disk configuration like this: sda=os:0,ceph:0,cephjournal:456780"

    echo "$cmd"

}


function remove_from_list {

    sed -e 's/^'$1'/#'$1'/' -i $NTA

}

function add_to_env {

    $FUEL --env $env_id node set --node-id $1 --role $role

}

function deploy_changes {

    if [ `rpm -qa | grep screen | wc -l` == "0" ]; then
      yum install -y screen && screen -dmS deploy_changes $FUEL --env $env_id deploy-changes
    else
      screen -dmS deploy_changes $FUEL --env $env_id deploy-changes
    fi
}

function get_fuel_id {

    node_fuel_id=`$FUEL node | $GREP $1 | $AWK '{print $1}'`
    return

}

function get_fuel_ip {

    node_fuel_ip=`$FUEL node | $GREP $1 | $AWK '{print $10}'`
    return

}

function net_config {

    update_credentials
    (( slave1 = (( (( $1 - 1 )) * 8 + 3 )) ))
    (( slave2 = (( (( $1 - 1 )) * 8 + 4 )) ))
    (( slave3 = (( (( $1 - 1 )) * 8 + 5 )) ))
    (( slave4 = (( (( $1 - 1 )) * 8 + 6 )) ))

#    debug ${data[$slave1]} ${data[$slave2]} ${data[$slave3]} ${data[$slave4]}

    if [ "${assign}" == "mac" ]; then
        if [ "$role" == "compute" ]; then 
            debug "compute network configuration"
#            interfaces configuration for production computes
            mgmtif=${data[$slave2]}"+"${data[$slave4]}
            publicif=${data[$slave2]}"+"${data[$slave4]}
            privateif=${data[$slave1]}"+"${data[$slave3]}
            storageif=${data[$slave2]}"+"${data[$slave4]}
#           for testing
#            mgmtif=${data[$slave1]}
#            publicif=${data[$slave1]}
#            privateif=${data[$slave1]}
#            storageif=${data[$slave1]}
        else
#            debug "ceph network configuration"
#            interfaces configuration for production ceph-osd
            mgmtif=${data[$slave2]}"+"${data[$slave4]}
            publicif=${data[$slave2]}"+"${data[$slave4]}
            privateif=${data[$slave2]}"+"${data[$slave4]}
            storageif=${data[$slave1]}"+"${data[$slave3]}
#           for testing
#            mgmtif=${data[$slave2]}
#            publicif=${data[$slave2]}
#            privateif=${data[$slave2]}
#            storageif=${data[$slave2]}
        fi
    fi

$MEBR --assign ${assign} --admin-pass $FUEL_ACCESS_password --admin-tenant admin --admin-username $FUEL_ACCESS_user --fuel $ADMIN_NETWORK_ipaddress --node $node_fuel_id --mgmt $mgmtif --public $publicif --storage $storageif --private $privateif --mgmtbondmode $mgmtbondmode --publicbondmode $publicbondmode --storagebondmode $storagebondmode --privatebondmode $privatebondmode

}

function disk_config {

    update_credentials

    if [ "$role" == "compute" ]; then 
       echo "Disks configurations were skipped"
    else
       $MDBR --login $FUEL_ACCESS_user --password $FUEL_ACCESS_password --port 8000 --host=$ADMIN_NETWORK_ipaddress $1 --disk $sda $sdb $sdc $sdd $sde $sdf $sdg $sdh $sdi $sdj $sdk $sdl $sdm

    fi
}

function set_ext_ip {
    (( ip_id = (( (( $1 - 1 )) * 8 + 2 )) ))
    (( storageip_id = (( (( $1 - 1 )) * 8 + 8 )) ))
    debug "ip id $ip_id"
    debug "ip address ${data[ ip_id ]}"
    ext_ip=${data[ ip_id ]}
    storage_ip=${data[ storageip_id ]}

if [ "$role" == "compute" ]; then 
    net_id=$(dockerctl shell postgres sudo -u postgres psql -d nailgun -t -c "select id from network_groups where name = 'public' and group_id = ${env_id}")
    storagenet_id=$(dockerctl shell postgres sudo -u postgres psql -d nailgun -t -c "select id from network_groups where name = 'storage' and group_id = ${env_id}")
    debug "Net ID $net_id"
#    dockerctl shell postgres sudo -u postgres psql -d nailgun -t -c "insert into ip_addrs (network,node,ip_addr) values (${net_id},${node_fuel_id},'${data[ip_id]}');"
    dockerctl shell postgres sudo -u postgres psql -n nailgun -t -c "insert into ip_addrs (network,node,ip_addr) select ${net_id},${node_fuel_id},'${data[storageip_id]}' where not exists ( select id from ip_addrs where node=${node_fuel_id} and network=${storagenet_id});" >/dev/null 2>&1;
     dockerctl shell postgres sudo -u postgres psql -n nailgun -t -c "insert into ip_addrs (network,node,ip_addr) select ${net_id},${node_fuel_id},'${data[ip_id]}' where not exists ( select id from ip_addrs where node=${node_fuel_id} and network=${net_id});" >/dev/null 2>&1;
else
    net_id=$(dockerctl shell postgres sudo -u postgres psql -d nailgun -t -c "select id from network_groups where name = 'storage' and group_id = ${env_id}")
    debug "Net ID $net_id"
#    dockerctl shell postgres sudo -u postgres psql -d nailgun -t -c "insert into ip_addrs (network,node,ip_addr) values (${net_id},${node_fuel_id},'${data[ip_id]}');"
    dockerctl shell postgres sudo -u postgres psql -n nailgun -t -c "insert into ip_addrs (network,node,ip_addr) select ${net_id},${node_fuel_id},'${data[ip_id]}' where not exists ( select id from ip_addrs where node=${node_fuel_id} and network=${net_id});" >/dev/null 2>&1;
fi

}

function set_hostname {
    (( hostname_id = (( (( $1 - 1 )) * 8 + 1 )) ))
    host_name=${data[ $hostname_id ]}

    debug "echo $host_name"
    if [[ "$1" == '' ]]; then
      ${GREEN}
      echo "usage: $0 node 1 2 4" >&2; 
      ${RESET}
      exit 0
    fi
        echo "Setting hostname for node-$2 to:" $host_name
        fuel node --node-id $2 --setname $host_name
}

function wol_node {

    update_credentials
    echo "Sending wol packet to node with mac:" $1
    for i in {1..10}; do
      /sbin/ether-wake -b -i ${ADMIN_NETWORK_interface} ${1};
    done
}

function check_nodes_count {

    if [ $nodes_count -lt "1" ] ; then 
        ${RED}
        echo "There is no spare nodes!"
        ${RESET}
        exit 1
    fi

}

function node_count {

    ${GREEN}
    echo "Total count of spare nodes:" $nodes_count
    ${RESET}

}

function check_ready {

    #Uses a custom command to ensure a container is ready
    update_credentials
    failure=0
    echo "checking that node or service is available: $1 $2"
    case $1 in
      node) retry_checker "fuel node | grep '$2' | grep 'True'" ;;
      deployed) retry_checker "fuel nodes | grep '$2' | grep ready" ;;
      *) echo "No defined test for determining if $1 is ready.";;
    esac

    if [ $failure -eq 1 ]; then
      echo "ERROR: $1 failed to start."
      return 1
    else
      echo "$1 is ready."
      return 0
    fi

}

function update_credentials {

    credentialfile=$(mktemp /tmp/servicepws.XXXXX)
    $GSC $ASTUTE_YAML > $credentialfile
    . $credentialfile
    rm -f $credentialfile

}

function retry_checker {

    tries=0
    echo "checking with command \"$*\""
    until eval $*; do
      rc=$?
      ((tries++))
      echo "try number $tries"
      echo "return code is $rc"
      if [ $tries -gt $CHECK_RETRIES ]; then
      failure=1
      break
    fi
      sleep 1
    done

}

function debug {

  if $DEBUG; then
    echo $@
  fi

}
