#!/bin/bash

if ${DEBUG}; then
  DOCKER="123 -D"
else
  DOCKER="123"
fi

function show_usage {
  echo "Usage:"
  echo "  $0 command"
  echo
  echo "Available commands: (Note: work in progress)"
  echo "help: show this message"
  echo "	Defaults 1: Ceph and compute nodes have to have the same HW configuration."
  echo "	Defaults 2: Nodes Prebootstrapped and turned off, waiting for WOL packet."
  echo "	Defaults 3: Nodes are renamed, and have no spaces in names. This is URGENT!!!"
  echo "	Defaults 4: to be added..."
  echo "Steps:"
  echo "	Step 1: Add info to file config/nodes_to_add"
  echo "	Step 2: Boot up the node, with sendind magic packet(wol)."
  echo "	Step 3: Check tha node is online"
  echo "	Step 4: Set hostname from file"
  echo "	Step 5: Receive id of node my the MAC".
  echo "	Step 6: Add nodes to cluster ID."
  echo "	Step 7: Configure node network parameters."
  echo "	Step 8: Configure node disks parameters."
  echo "	Step 9: Deploy compute/ceph node."
  echo "Commands:"
  echo "	Comming soon..."


}

function parse_options {
  opts="$@"
  for opt in $@; do
    case $opt in
      -V|--version) VERSION=$2
                    shift 2
                    ;;
      -d|--debug)   DEBUG=true
                    shift
                    ;;
      --nodebug)    DEBUG=false
                    shift
                    ;;
      --)           shift
                    nonopts+=("$@")
                    return
                    ;;
      help|boot|deploy|start|stop|remove)
                    nonopts+=("$@")
                    return
                    ;;
      -*)           ${YELLOW}
                    echo "Unrecognized option: $opt" 1>&2
                    ${RESET}
                    exit 1
                    ;;
      *)            nonopts+=("$opt")
                    ;;
    esac
  done
}


function list_nodes {
  columnname=("ADMIN MAC" "NAME")
  offset=0
  for ((nodes=0;nodes<nodes_count;nodes++))
    do
      for((i=0;i<2;i++))
      do
          echo ${columnname[$i]} $'\xr' ${data[ (( $i + $offset )) ]}
      done | column -t -s$'\xr'
      (( offset += 2 ))
    done
}

function node_data {

  re='^[1-9]+$'
  if [[ "$1" == '' ]]; then
    ${GREEN}
    echo "usage: $0 info 1 2 4" >&2; 
    ${RESET}
    exit 0
  fi
  for nodes in $@; do
    if ! [[ $nodes =~ $re ]] ; then
      ${RED}
      echo "error: Not a number, should be in range [1..$nodes_count]" >&2;
      ${RESET}
      exit 1
    elif
      [[ $nodes > $nodes_count ]] ; then 
      ${RED}
      echo "ID of node number out of range [1.."$nodes_count"] please check the file node_to_add"
      ${RESET}
    else
      columnname=("MAC" "NAME")
      for((i=0;i<2;i++)) 
       do
         echo ${columnname[$i]} $'\xr' "${data[ (( (( $nodes - 1 )) * 2 + $i )) ]}"
       done | column -t -s$'\xr'
      fi
    done
  node_count
}

function wol_and_check {

  re='^[1-9]+$'
    if [[ "$1" == '' ]]; then
      ${GREEN}
      echo "usage: $0 node 1 2 4" >&2; 
      ${RESET}
      exit 0
    fi
    if ! [[ $1 =~ $re ]] ; then
      ${RED}
      echo "error: Not a number, should be in range [1..$nodes_count]" >&2;
      ${RESET}
      exit 1
    else
      (( macid = (( (( $1 - 1 )) * 2 )) ))
      echo ${data[ $macid ]}
      wol_node ${data[ $macid ]}
      check_ready node ${data[ $macid ]}
      get_fuel_id ${data[ $macid ]}
      set_hostname $1 $node_fuel_id
      add_to_env $node_fuel_id
      net_config ${data[ $macid ]}
      set_ext_ip
      deploy_changes
      remove_from_list
     fi

}

function remove_from_list {
  exit 0
}

function add_to_env {
    $FUEL --env $env_id node set --node-id $1 --role $role
}

function deploy_changes {
    $FUEL --env $env_id deploy-changes
}



function get_fuel_id {
    node_fuel_id=`$FUEL node | $GREP $1 | $AWK '{print $1}'`
    return
}

function net_config {
    config/manage_eth_by_roles --assign name --admin-pass $FUEL_ACCESS_password --admin-tenant admin --admin-username $FUEL_ACCESS_user --fuel $ADMIN_NETWORK_ipaddress --node $node_fuel_id --mgmt $mgmtif --public $publicif --storage $storageif --private $privateif --mgmtbondmode $mgmtbondmode --publicbondmode $publicbondmode --storagebondmode $storagebondmode --privatebondmode $privatebondmode
}

function set_ext_ip {
#not implemented yet
#returns the net_id
#NET_ID=$(sudo -u postgres psql -d nailgun -t -c "select id from network_groups where name = 'public' and group_id = 2")
#inserts the public ip
#sudo -u postgres psql -d nailgun -t -c "insert into ip_addrs (network,node,ip_addr) values ($NET_ID,8,'172.16.49.200');"

#to check
#sudo -u postgres psql -d nailgun -t -c "insert into ip_addrs (network,node,ip_addr) values ((select id from network_groups where name = 'public' and group_id = 2),8,'172.16.49.200');"
exit 0
}

function set_hostname {

  (( hostname_id = (( (( $1 - 1 )) * 2 + 1 )) ))
  host_name=${data[ $hostname_id ]}
  #debug echo $host_name

    if [[ "$1" == '' ]]; then
      ${GREEN}
      echo "usage: $0 node 1 2 4" >&2; 
      ${RESET}
      exit 0
    fi
        echo "Setting hostname for node-$2 to:" $host_name
        fuel node --node-id $2 --setname $host_name
}

function wol_node {
  update_credentials
  echo "Sending wol packet to node with mac:" $1
  ether-wake -i ${ADMIN_NETWORK_interface} $1
}

function node_count {
  ${GREEN}
  echo "Total count of spare nodes:" $nodes_count
  ${RESET}
}

function check_ready {
  #Uses a custom command to ensure a container is ready
  update_credentials
  failure=0
  echo "checking that node or service is available: $1 $2"
  case $1 in
      node) retry_checker "fuel node | grep '$2' | grep 'True'" ;;
      *) echo "No defined test for determining if $1 is ready.";;
  esac

  if [ $failure -eq 1 ]; then
    echo "ERROR: $1 failed to start."
    return 1
  else
    echo "$1 is ready."
    return 0
  fi
}

function update_credentials {
  credentialfile=$(mktemp /tmp/servicepws.XXXXX)
  $GSC $ASTUTE_YAML > $credentialfile
  . $credentialfile
  rm -f $credentialfile
}

function retry_checker {
  tries=0
  echo "checking with command \"$*\""
  until eval $*; do
    rc=$?
    ((tries++))
    echo "try number $tries"
    echo "return code is $rc"
    if [ $tries -gt $CHECK_RETRIES ]; then
      failure=1
    break
  fi
    sleep 1
  done
}

